openapi: "3.0.3"
info:
  title: "com_nw_bookify_ktor_backend API"
  description: "com_nw_bookify_ktor_backend API"
  version: "1.0.0"
servers:
- url: "https://com_nw_bookify_ktor_backend"
paths:
  /api/v1/auth/login:
    post:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid Credentials"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/auth/me:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtUser"
  /api/v1/auth/register:
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /api/v1/books:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
  /api/v1/books/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
  /api/v1/books/{id}/tags:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: ""
  /api/v1/books/{id}/tags/add:
    post:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /api/v1/session/increment:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /api/v1/search:
    get:
      description: ""
      parameters:
      - name: "isbn"
        in: "query"
        required: false
        schema:
          type: "number"
      responses:
        "200":
          description: "OK <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "/error"
        "409":
          description: "Conflict"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
  /api/v1/tags:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Tag"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tag"
  /api/v1/tags/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tag"
  /api/v1/users:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /api/v1/users/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/v1/favorites:
    delete:
      description: ""
      responses:
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Favorite unmarked."
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Favorite"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Favorite"
  /api/v1/favorites/{userId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Favorite"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        fullName:
          type: "string"
        email:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        authToken:
          type: "string"
    JwtUser:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        userName:
          type: "string"
        email:
          type: "string"
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        isbn10:
          type: "string"
        isbn13:
          type: "string"
        title:
          type: "string"
        subtitle:
          type: "string"
        author:
          type: "string"
        publisher:
          type: "string"
        pages:
          type: "integer"
          format: "int32"
        imageUrl:
          type: "string"
        selfLink:
          type: "string"
        publishedDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
        printType:
          type: "string"
          enum:
          - "Companion"
          - "type"
          - "BOOK"
          - "EBOOK"
          - "MAGAZINE"
        category:
          type: "string"
        maturityRating:
          type: "string"
        language:
          type: "string"
        infoLink:
          type: "string"
        rating:
          type: "string"
          enum:
          - "Companion"
          - "rating"
          - "ZERO"
          - "ONE"
          - "TWO"
          - "THREE"
          - "FOUR"
          - "FIVE"
        comment:
          type: "string"
        readStatus:
          type: "string"
          enum:
          - "Companion"
          - "status"
          - "UNREAD"
          - "READING"
          - "READ"
          - "UNFINISHED"
        addedOnDate:
          type: "string"
          format: "date-time"
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
    Favorite:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        bookId:
          type: "integer"
          format: "int32"